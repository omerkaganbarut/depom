#include <Arduino.h>
#include <SD.h>
#include "stepmotorenkoderiokuma.h"
#include "config.h"
#include "analogokuyucu.h"

// Step motor ve encoder nesneleri
StepMotorEncoder stepEnc1(ENC1_A_PIN, ENC1_B_PIN);
StepMotorEncoder omronEnc(OMRON_A_PIN, OMRON_B_PIN);
AnalogOkuyucu pot(A0, 0, 1023, 0.0f, 400.0f);

// --- Buffer tanımı ---
#define BUFFER_BOYUTU  100  // Her seferinde 100 satırlık veri yazılacak
struct KAYIT_SATIRI {
  uint16_t pulseNo;
  int32_t enc1;
  int32_t omron;
  float potDegeri;
};
KAYIT_SATIRI buffer[BUFFER_BOYUTU];
uint16_t bufferIndex = 0;

// --- SD ve dosya oluşturma fonksiyonu ---
File veriDosyasi;
String dosyaAdiOlustur() {
  for (int i = 1; i < 100; i++) {
    String ad = "veri" + String(i) + ".txt";
    if (!SD.exists(ad.c_str())) {
      return ad;
    }
  }
  return "veriSON.txt";
}

// --- Parametreler ---
const uint16_t MAX_PULSE = 10000; // 1 tur için toplam pulse
const unsigned long TUR_SURE_MS = 20000; // 20 saniyede 1 tur
const float PULSE_FREQ = (float)MAX_PULSE / (TUR_SURE_MS / 1000.0f); // pulse/sn
const unsigned long PULSE_ARALIK_US = (1000000UL) / PULSE_FREQ; // mikro-saniye cinsinden
// PULSE_ARALIK_US her pulse’ın aralığı, tam sabitlik için micros kullanılacak

// --- Motor pulse ve sayaçlar ---
uint16_t pulseSayaci = 0;
bool pulseHigh = false;
unsigned long pulseTimerUs = 0;

// --- Durum ---
bool bufferAktariliyor = false;

void setup() {
  Serial.begin(115200);

  pinMode(STEP1_PIN, OUTPUT);
  pinMode(DIR1_PIN, OUTPUT);
  pinMode(ENA1_PIN, OUTPUT);
  pinMode(ENA2_PIN, OUTPUT);
  digitalWrite(ENA1_PIN, LOW);   // Sürücü aktif
  digitalWrite(ENA2_PIN, HIGH); 
  digitalWrite(DIR1_PIN, HIGH);  // Yön

  stepEnc1.begin();
  omronEnc.begin();
  pot.baslat();

  if (!SD.begin(SD_CS_PIN)) {
    Serial.println("❌ SD kart başlatılamadı!");
    while (1);
  }

  String yeniDosya = dosyaAdiOlustur();
  veriDosyasi = SD.open(yeniDosya.c_str(), FILE_WRITE);
  if (!veriDosyasi) {
    Serial.print("❌ ");
    Serial.print(yeniDosya);
    Serial.println(" dosyası açılamadı!");
    while (1);
  }
  Serial.print("✅ Kayıt dosyası: ");
  Serial.println(yeniDosya);

  // Başlık satırı
  veriDosyasi.println("PULSE, ENC1, OMRON, POT");
  veriDosyasi.flush();

  Serial.print("Pulse frekansı: ");
  Serial.print(PULSE_FREQ, 2);
  Serial.println(" Hz");
  Serial.println("✅ Kayıt başlıyor...");
  pulseTimerUs = micros();
}

void loop() {
  // Eğer buffer aktarılıyor ise motoru beklet, SD'ye aktarım yapılır
  if (bufferAktariliyor) {
    for (uint16_t i = 0; i < BUFFER_BOYUTU; i++) {
      veriDosyasi.print(buffer[i].pulseNo);
      veriDosyasi.print(", ");
      veriDosyasi.print(buffer[i].enc1);
      veriDosyasi.print(", ");
      veriDosyasi.print(buffer[i].omron);
      veriDosyasi.print(", ");
      veriDosyasi.println(buffer[i].potDegeri, 2);
    }
    veriDosyasi.flush();
    bufferAktariliyor = false;
    bufferIndex = 0; // yeni buffer'a başlanacak

    Serial.println("🟢 100'lük veri buffer'ı SD'ye aktarıldı!");
    // Burada motor beklemişti, şimdi devam edecek
  }

  // Pulse işlemleri (buffer aktarımı sırasında motor bekler)
  if (pulseSayaci < MAX_PULSE && !bufferAktariliyor) {
    unsigned long simdiUs = micros();
    if (!pulseHigh && (simdiUs - pulseTimerUs >= PULSE_ARALIK_US)) {
      // LOW → HIGH geçişi (pulse başla)
      digitalWrite(STEP1_PIN, HIGH);
      pulseHigh = true;
      pulseTimerUs = simdiUs;

      // --- VERİ OKU VE BUFFER'A YAZ ---
      pulseSayaci++;
      buffer[bufferIndex].pulseNo = pulseSayaci;
      buffer[bufferIndex].enc1 = stepEnc1.getPosition();
      buffer[bufferIndex].omron = omronEnc.getPosition();
      buffer[bufferIndex].potDegeri = pot.oku();

      bufferIndex++;

      // Seri ekrana özet ver
      if (bufferIndex == 1 || bufferIndex == BUFFER_BOYUTU)
      {
        Serial.print("✔ ");
        Serial.print(pulseSayaci);
        Serial.print(" | ENC1: ");
        Serial.print(buffer[bufferIndex-1].enc1);
        Serial.print(" | OMRON: ");
        Serial.print(buffer[bufferIndex-1].omron);
        Serial.print(" | POT: ");
        Serial.println(buffer[bufferIndex-1].potDegeri, 2);
      }

      // Buffer dolduysa, SD'ye aktarılacak, motor duracak
      if (bufferIndex >= BUFFER_BOYUTU) {
        bufferAktariliyor = true;
         // Sürücü disable → motor durur
        digitalWrite(STEP1_PIN, LOW); // Pulse düşükte bırak
        pulseHigh = false;
        return;
      }
    }
    else if (pulseHigh && (simdiUs - pulseTimerUs >= 100)) { // Pulse genişliği min. 100us
      digitalWrite(STEP1_PIN, LOW);
      pulseHigh = false;
      pulseTimerUs = simdiUs;
    }
  }

  // Tüm pulse’lar tamamlandıysa, kalan buffer'ı yaz ve çık
  if (pulseSayaci >= MAX_PULSE) {
    if (bufferIndex > 0) {
      for (uint16_t i = 0; i < bufferIndex; i++) {
        veriDosyasi.print(buffer[i].pulseNo);
        veriDosyasi.print(", ");
        veriDosyasi.print(buffer[i].enc1);
        veriDosyasi.print(", ");
        veriDosyasi.print(buffer[i].omron);
        veriDosyasi.print(", ");
        veriDosyasi.println(buffer[i].potDegeri, 2);
      }
      veriDosyasi.flush();
      Serial.println("🟢 Son kalan buffer da SD'ye aktarıldı.");
    }
    digitalWrite(ENA1_PIN, HIGH);  // Sürücüyü kapat

    if (veriDosyasi) {
      veriDosyasi.close();
      Serial.println("✅ Veri kaydı tamamlandı, dosya kapatıldı.");
    }
    while (1);
  }
}